@import url("https://fonts.googleapis.com/css?family=Montserrat:400,700,800&display=swap");@import url("https://fonts.googleapis.com/css?family=Poiret+One|Quicksand&display=swap");.svelte-vcz8gq{margin:0;padding:0;font-family:"Quicksand", sans-serif}canvas.svelte-vcz8gq{width:100%;height:100%;background:#e8eff3;position:absolute;left:0;top:0;z-index:-1}.aboutContainer.svelte-vcz8gq{width:95vw;height:90vh}.aboutMeParent.svelte-vcz8gq{display:grid;grid-template-columns:1fr 250px;grid-template-rows:repeat(5, 1fr);grid-column-gap:10px;grid-row-gap:10px;width:100%;height:100%}.bioBody.svelte-vcz8gq{grid-area:1 / 1 / 6 / 2;background:black}.skillsTree.svelte-vcz8gq{grid-area:1 / 2 / 5 / 3}.socials.svelte-vcz8gq{grid-area:5 / 2 / 6 / 3}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */