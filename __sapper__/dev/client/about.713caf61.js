import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as onMount, a as space, e as element, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop, p as binding_callbacks, r as globals } from './client.adab349b.js';

/* src/routes/about.svelte generated by Svelte v3.18.2 */

const { document: document_1 } = globals;
const file = "src/routes/about.svelte";

function create_fragment(ctx) {
	let t;
	let body;
	let canvas_1;
	let canvas_1_width_value;
	let canvas_1_height_value;

	const block = {
		c: function create() {
			t = space();
			body = element("body");
			canvas_1 = element("canvas");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ine71f\"]", document_1.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			body = claim_element(nodes, "BODY", { class: true });
			var body_nodes = children(body);

			canvas_1 = claim_element(body_nodes, "CANVAS", {
				id: true,
				width: true,
				height: true,
				class: true
			});

			children(canvas_1).forEach(detach_dev);
			body_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document_1.title = "About";
			attr_dev(canvas_1, "id", "canvasId");
			attr_dev(canvas_1, "width", canvas_1_width_value = 1000);
			attr_dev(canvas_1, "height", canvas_1_height_value = 1000);
			attr_dev(canvas_1, "class", "svelte-1sup3tp");
			add_location(canvas_1, file, 43, 1, 905);
			attr_dev(body, "class", "svelte-1sup3tp");
			add_location(body, file, 42, 0, 897);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, body, anchor);
			append_dev(body, canvas_1);
			/*canvas_1_binding*/ ctx[6](canvas_1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(body);
			/*canvas_1_binding*/ ctx[6](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	var cols, rows;
	var scale = 20;
	var w = 600;
	var h = 600;
	cols = w / scale;
	rows = h / scale;
	let canvas;

	onMount(() => {
		var canvas = document.getElementById("canvas");
		const ctx = canvas.getContext("2d");

		for (let y = 0; y < rows; y++) {
			ctx.beginPath();

			for (let x = 0; x < cols; x++) {
				ctx.strokeStyle = "#FF0000";
				ctx.strokeRect(x * scale, y * scale, scale, scale);
			}

			ctx.endPath();
		}
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			$$invalidate(0, canvas = $$value);
		});
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("cols" in $$props) cols = $$props.cols;
		if ("rows" in $$props) rows = $$props.rows;
		if ("scale" in $$props) scale = $$props.scale;
		if ("w" in $$props) w = $$props.w;
		if ("h" in $$props) h = $$props.h;
		if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
	};

	return [canvas, cols, rows, scale, w, h, canvas_1_binding];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment.name
		});
	}
}

export default About;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJvdXQuNzEzY2FmNjEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYWJvdXQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cblx0dmFyIGNvbHMsIHJvd3M7XG5cdHZhciBzY2FsZSA9IDIwO1xuXHR2YXIgdyA9IDYwMDtcblx0dmFyIGggPSA2MDA7XG5cdGNvbHMgPSB3IC8gc2NhbGU7XG5cdHJvd3MgPSBoIC8gc2NhbGU7XG5cblx0bGV0IGNhbnZhcztcblx0b25Nb3VudCgoKSA9PiB7XG5cdFx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xuXHRcdGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG5cdFx0bGV0IGZyYW1lO1xuXG5cdFx0Zm9yIChsZXQgeSA9IDA7IHkgPCByb3dzOyB5KyspIHtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGZvciAobGV0IHggPSAwOyB4IDwgY29sczsgeCsrKSB7XG5cdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IFwiI0ZGMDAwMFwiO1xuXHRcdFx0XHRjdHguc3Ryb2tlUmVjdCh4ICogc2NhbGUsIHkgKiBzY2FsZSwgc2NhbGUsIHNjYWxlKTtcblx0XHRcdH1cblx0XHRcdGN0eC5lbmRQYXRoKCk7XG5cdFx0fVxuXHR9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cblx0QGltcG9ydCBcIi4uL3N0eWxlcy90aGVtZS5zY3NzXCI7XG5cdCoge1xuXHRcdG1hcmdpbjogMDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5cdGNhbnZhcyB7XG5cdFx0Lyogd2lkdGg6IDEwMCU7XG5cdFx0aGVpZ2h0OiAxMDAlOyAqL1xuXHR9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5BYm91dDwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48Ym9keT5cblx0PGNhbnZhc1xuXHRcdGlkPVwiY2FudmFzSWRcIlxuXHRcdGJpbmQ6dGhpcz1cIntjYW52YXN9XCJcblx0XHR3aWR0aD1cInsxMDAwfVwiXG5cdFx0aGVpZ2h0PVwiezEwMDB9XCJcblx0PjwvY2FudmFzPlxuPC9ib2R5PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzREE4Q1UsSUFBSTt3REFDSCxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBNUNWLElBQUksRUFBRSxJQUFJO0tBQ1YsS0FBSyxHQUFHLEVBQUU7S0FDVixDQUFDLEdBQUcsR0FBRztLQUNQLENBQUMsR0FBRyxHQUFHO0NBQ1gsSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLO0NBQ2hCLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSztLQUVaLE1BQU07O0NBQ1YsT0FBTztNQUNGLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVE7UUFDdkMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSTs7V0FHekIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7R0FDMUIsR0FBRyxDQUFDLFNBQVM7O1lBQ0osQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7SUFDMUIsR0FBRyxDQUFDLFdBQVcsR0FBRyxTQUFTO0lBQzNCLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLOzs7R0FFbEQsR0FBRyxDQUFDLE9BQU87Ozs7OzttQkF1QkEsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
