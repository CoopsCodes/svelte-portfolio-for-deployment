@import url("https://fonts.googleapis.com/css?family=Montserrat:400,700,800&display=swap");@import url("https://fonts.googleapis.com/css?family=Poiret+One|Quicksand&display=swap");.svelte-v1sypk.svelte-v1sypk{margin:0;padding:0}.projectsContainer.svelte-v1sypk.svelte-v1sypk{width:100vw;height:100vh;background:#e8eff3;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;text-decoration:none;font-family:"Quicksand", sans-serif}.projectsContainer.svelte-v1sypk a.svelte-v1sypk:link,.projectsContainer.svelte-v1sypk a.svelte-v1sypk:visited{text-decoration:none}.projectsContainer.svelte-v1sypk h1.svelte-v1sypk{font-size:20px}.projectsContainer.svelte-v1sypk .projectTile.svelte-v1sypk{display:flex;flex-direction:column;justify-content:center;align-items:center;width:250px;height:300px;margin:10px;background:white;box-shadow:2px 2px 5px #2a2a2a;font-family:"Quicksand", sans-serif;transition:all 0.2s ease-in-out}.projectsContainer.svelte-v1sypk .projectTile.svelte-v1sypk:hover{box-shadow:5px 5px 10px #2a2a2a}.projectsContainer.svelte-v1sypk .projectTile:hover .projectBody.svelte-v1sypk{box-shadow:none;border-top:black 1px solid;border-bottom:black 1px solid}.projectsContainer.svelte-v1sypk .projectTile .projectTitle.svelte-v1sypk{display:flex;flex-direction:column;justify-content:center;height:50px;width:250px;text-align:center;color:black}.projectsContainer.svelte-v1sypk .projectTile .projectBody.svelte-v1sypk{display:flex;flex-direction:column;justify-content:space-evenly;align-items:center;text-align:center;height:150px;width:220px;margin-top:20%;box-shadow:2px 2px 5px black;transition:all 0.2s ease-in-out}.projectsContainer.svelte-v1sypk .projectTile .projectBody p.svelte-v1sypk{padding:0 5px 0 5px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */